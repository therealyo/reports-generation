import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// stacks/ReceivingEmail.ts
import { use as use2, Function as Function2 } from "sst/constructs";
import * as lambdaEventSources from "aws-cdk-lib/aws-lambda-event-sources";
import { ReceiptRuleSet } from "aws-cdk-lib/aws-ses";
import * as s3 from "aws-cdk-lib/aws-s3";
import * as actions from "aws-cdk-lib/aws-ses-actions";

// stacks/Database.ts
import { aws_rds } from "aws-cdk-lib";
import {
  InstanceClass,
  InstanceSize,
  InstanceType,
  Peer,
  Port,
  SecurityGroup,
  SubnetType,
  Vpc
} from "aws-cdk-lib/aws-ec2";
function Database({ stack }) {
  const vpc = new Vpc(stack, "database-vpc", {
    maxAzs: 3,
    subnetConfiguration: [
      {
        name: "public-db",
        subnetType: SubnetType.PUBLIC,
        cidrMask: 24
      },
      {
        name: "private",
        subnetType: SubnetType.PRIVATE_WITH_EGRESS,
        cidrMask: 24
      }
    ]
  });
  const secGroup = new SecurityGroup(
    stack,
    "allow_database_connection_from_internet",
    {
      vpc
    }
  );
  secGroup.addIngressRule(Peer.ipv4("0.0.0.0/0"), Port.tcp(5432));
  const db = new aws_rds.DatabaseInstance(stack, "reports-database", {
    engine: aws_rds.DatabaseInstanceEngine.postgres({
      version: aws_rds.PostgresEngineVersion.VER_14_1
    }),
    publiclyAccessible: true,
    instanceType: InstanceType.of(InstanceClass.BURSTABLE3, InstanceSize.MICRO),
    vpc,
    vpcSubnets: {
      subnets: vpc.publicSubnets
    },
    securityGroups: [secGroup],
    databaseName: "reports",
    storageEncrypted: false
  });
  db.connections.allowDefaultPortFromAnyIpv4();
  return {
    db,
    vpc,
    secGroup
  };
}
__name(Database, "Database");

// stacks/PDFGeneration.ts
import { Function } from "sst/constructs";
import * as lambda from "aws-cdk-lib/aws-lambda";
function ReportGeneration({ stack }) {
  const pdfGeneration = new Function(stack, "pdf-generation", {
    handler: "src/pdfGeneration.handler",
    layers: [
      lambda.LayerVersion.fromLayerVersionArn(
        stack,
        "pdf-layer",
        process.env.LAMBDA_LAYER_ARN
      )
    ],
    nodejs: {
      install: ["@sparticuz/chromium", "puppeteer-core"]
    },
    runtime: "nodejs16.x",
    functionName: "pdf-generation-from-html"
  });
  return {
    pdfGeneration
  };
}
__name(ReportGeneration, "ReportGeneration");

// stacks/ReceivingEmail.ts
import iam from "aws-cdk-lib/aws-iam";
function ReceivingEmail({ stack }) {
  const { vpc, secGroup, db } = use2(Database);
  const { pdfGeneration } = use2(ReportGeneration);
  const bucket = new s3.Bucket(stack, "ReportsBucket", {
    bucketName: process.env.BUCKET_NAME
  });
  const lambda2 = new Function2(stack, "bucket-handler", {
    handler: "src/parseEmail.handler",
    vpc,
    securityGroups: [secGroup],
    environment: {
      BUCKET_NAME: bucket.bucketName,
      ACCESS_KEY: process.env.ACCESS_KEY,
      SECRET_ACCESS_KEY: process.env.SECRET_ACCESS_KEY,
      DATABASE_SECRET: db.secret?.secretName,
      DATABASE_PORT: db.dbInstanceEndpointPort,
      DATABASE_HOST: db.dbInstanceEndpointAddress,
      PDF_LAMBDA_NAME: pdfGeneration.functionName,
      SEND_TO: process.env.SEND_TO,
      SOURCE_EMAIL: process.env.SOURCE_EMAIL,
      AUTHENTICATION: process.env.AUTHENTICATION,
      AUTHORIZATION: process.env.AUTHORIZATION
    },
    functionName: "report_generation"
  });
  lambda2.attachPermissions(["s3"]);
  lambda2.attachPermissions(["secretsmanager"]);
  pdfGeneration.grantInvoke(lambda2);
  lambda2.addToRolePolicy(
    new iam.PolicyStatement({
      actions: ["ses:SendEmail", "SES:SendRawEmail"],
      resources: ["*"],
      effect: iam.Effect.ALLOW
    })
  );
  const s3PutEventSource = new lambdaEventSources.S3EventSource(bucket, {
    events: [s3.EventType.OBJECT_CREATED_PUT]
  });
  lambda2.addEventSource(s3PutEventSource);
  const reactToReportEmail = new ReceiptRuleSet(stack, "email rule", {
    rules: [
      {
        recipients: [process.env.DOMAIN_NAME],
        actions: [
          new actions.S3({
            bucket
          })
        ],
        enabled: true
      }
    ]
  });
  return {
    lambda: lambda2,
    bucket,
    reactToReportEmail
  };
}
__name(ReceivingEmail, "ReceivingEmail");

// sst.config.ts
import { config } from "dotenv";

// stacks/SendReports.ts
import { use as use3, Function as Function3, Cron } from "sst/constructs";
import { Schedule } from "aws-cdk-lib/aws-events";
import iam2 from "aws-cdk-lib/aws-iam";
function SendReports({ stack }) {
  const { pdfGeneration } = use3(ReportGeneration);
  const { db } = use3(Database);
  const sendEmailsLambda = new Function3(stack, "cron-lambda", {
    handler: "src/sendEmail.handler",
    environment: {
      PDF_LAMBDA_NAME: pdfGeneration.functionName,
      DATABASE_SECRET: db.secret?.secretName,
      SEND_TO: process.env.SEND_TO,
      SOURCE_EMAIL: process.env.SOURCE_EMAIL,
      AUTHENTICATION: process.env.AUTHENTICATION,
      AUTHORIZATION: process.env.AUTHORIZATION
    },
    functionName: "send-emails-lambda"
  });
  const cron = new Cron(stack, "send-email-cron", {
    job: sendEmailsLambda,
    cdk: {
      rule: {
        schedule: Schedule.expression("cron(* * * * ? *)")
      }
    }
  });
  sendEmailsLambda.addToRolePolicy(
    new iam2.PolicyStatement({
      actions: ["ses:SendEmail", "SES:SendRawEmail"],
      resources: ["*"],
      effect: iam2.Effect.ALLOW
    })
  );
  sendEmailsLambda.attachPermissions(["secretsmanager"]);
  pdfGeneration.grantInvoke(sendEmailsLambda);
  return {
    cron
  };
}
__name(SendReports, "SendReports");

// sst.config.ts
config();
var sst_config_default = {
  config(_input) {
    return {
      name: "report-generation",
      region: "us-east-1"
    };
  },
  stacks(app) {
    app.stack(Database);
    app.stack(ReportGeneration);
    app.stack(ReceivingEmail);
    app.stack(SendReports);
  }
};
export {
  sst_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
